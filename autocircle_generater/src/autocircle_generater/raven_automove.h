// Generated by gencpp from file autocircle_generater/raven_automove.msg
// DO NOT EDIT!


#ifndef AUTOCIRCLE_GENERATER_MESSAGE_RAVEN_AUTOMOVE_H
#define AUTOCIRCLE_GENERATER_MESSAGE_RAVEN_AUTOMOVE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Transform.h>

namespace autocircle_generater
{
template <class ContainerAllocator>
struct raven_automove_
{
  typedef raven_automove_<ContainerAllocator> Type;

  raven_automove_()
    : hdr()
    , del_pos()
    , grasp()
    , tf_incr()  {
      del_pos.assign(0);

      grasp.assign(0.0);
  }
  raven_automove_(const ContainerAllocator& _alloc)
    : hdr(_alloc)
    , del_pos()
    , grasp()
    , tf_incr()  {
  (void)_alloc;
      del_pos.assign(0);

      grasp.assign(0.0);

      tf_incr.assign( ::geometry_msgs::Transform_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _hdr_type;
  _hdr_type hdr;

   typedef boost::array<int32_t, 6>  _del_pos_type;
  _del_pos_type del_pos;

   typedef boost::array<float, 2>  _grasp_type;
  _grasp_type grasp;

   typedef boost::array< ::geometry_msgs::Transform_<ContainerAllocator> , 2>  _tf_incr_type;
  _tf_incr_type tf_incr;





  typedef boost::shared_ptr< ::autocircle_generater::raven_automove_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autocircle_generater::raven_automove_<ContainerAllocator> const> ConstPtr;

}; // struct raven_automove_

typedef ::autocircle_generater::raven_automove_<std::allocator<void> > raven_automove;

typedef boost::shared_ptr< ::autocircle_generater::raven_automove > raven_automovePtr;
typedef boost::shared_ptr< ::autocircle_generater::raven_automove const> raven_automoveConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autocircle_generater::raven_automove_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autocircle_generater::raven_automove_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace autocircle_generater

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'autocircle_generater': ['/home/bgusigma/raven_ws/src/autocircle_generater/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::autocircle_generater::raven_automove_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autocircle_generater::raven_automove_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autocircle_generater::raven_automove_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autocircle_generater::raven_automove_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autocircle_generater::raven_automove_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autocircle_generater::raven_automove_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autocircle_generater::raven_automove_<ContainerAllocator> >
{
  static const char* value()
  {
    return "49b0f6b7ebb63277bb37a23557db120f";
  }

  static const char* value(const ::autocircle_generater::raven_automove_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x49b0f6b7ebb63277ULL;
  static const uint64_t static_value2 = 0xbb37a23557db120fULL;
};

template<class ContainerAllocator>
struct DataType< ::autocircle_generater::raven_automove_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autocircle_generater/raven_automove";
  }

  static const char* value(const ::autocircle_generater::raven_automove_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autocircle_generater::raven_automove_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header      hdr\n\
int32[6]    del_pos\n\
float32[2]  grasp\n\
geometry_msgs/Transform[2] tf_incr\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::autocircle_generater::raven_automove_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autocircle_generater::raven_automove_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hdr);
      stream.next(m.del_pos);
      stream.next(m.grasp);
      stream.next(m.tf_incr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct raven_automove_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autocircle_generater::raven_automove_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autocircle_generater::raven_automove_<ContainerAllocator>& v)
  {
    s << indent << "hdr: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.hdr);
    s << indent << "del_pos[]" << std::endl;
    for (size_t i = 0; i < v.del_pos.size(); ++i)
    {
      s << indent << "  del_pos[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.del_pos[i]);
    }
    s << indent << "grasp[]" << std::endl;
    for (size_t i = 0; i < v.grasp.size(); ++i)
    {
      s << indent << "  grasp[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.grasp[i]);
    }
    s << indent << "tf_incr[]" << std::endl;
    for (size_t i = 0; i < v.tf_incr.size(); ++i)
    {
      s << indent << "  tf_incr[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "    ", v.tf_incr[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOCIRCLE_GENERATER_MESSAGE_RAVEN_AUTOMOVE_H
