// Generated by gencpp from file AutoCircle_generater/haptic_device.msg
// DO NOT EDIT!


#ifndef AUTOCIRCLE_GENERATER_MESSAGE_HAPTIC_DEVICE_H
#define AUTOCIRCLE_GENERATER_MESSAGE_HAPTIC_DEVICE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace raven_2
{
template <class ContainerAllocator>
struct haptic_device_
{
  typedef haptic_device_<ContainerAllocator> Type;

  haptic_device_()
    : hdr()
    , del_pos()  {
      del_pos.assign(0);
  }
  haptic_device_(const ContainerAllocator& _alloc)
    : hdr(_alloc)
    , del_pos()  {
  (void)_alloc;
      del_pos.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _hdr_type;
  _hdr_type hdr;

   typedef boost::array<int32_t, 3>  _del_pos_type;
  _del_pos_type del_pos;





  typedef boost::shared_ptr< ::AutoCircle_generater::haptic_device_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::AutoCircle_generater::haptic_device_<ContainerAllocator> const> ConstPtr;

}; // struct haptic_device_

typedef ::AutoCircle_generater::haptic_device_<std::allocator<void> > haptic_device;

typedef boost::shared_ptr< ::AutoCircle_generater::haptic_device > haptic_devicePtr;
typedef boost::shared_ptr< ::AutoCircle_generater::haptic_device const> haptic_deviceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::AutoCircle_generater::haptic_device_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::AutoCircle_generater::haptic_device_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace AutoCircle_generater

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'AutoCircle_generater': ['/home/raven/raven_ws/src/AutoCircle_generater/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::AutoCircle_generater::haptic_device_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::AutoCircle_generater::haptic_device_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::AutoCircle_generater::haptic_device_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::AutoCircle_generater::haptic_device_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::AutoCircle_generater::haptic_device_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::AutoCircle_generater::haptic_device_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::AutoCircle_generater::haptic_device_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a7eebc6ea9656fcfb48e808d322e0e17";
  }

  static const char* value(const ::AutoCircle_generater::haptic_device_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa7eebc6ea9656fcfULL;
  static const uint64_t static_value2 = 0xb48e808d322e0e17ULL;
};

template<class ContainerAllocator>
struct DataType< ::AutoCircle_generater::haptic_device_<ContainerAllocator> >
{
  static const char* value()
  {
    return "AutoCircle_generater/haptic_device";
  }

  static const char* value(const ::AutoCircle_generater::haptic_device_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::AutoCircle_generater::haptic_device_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header      hdr\n\
int32[3]    del_pos\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::AutoCircle_generater::haptic_device_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::AutoCircle_generater::haptic_device_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hdr);
      stream.next(m.del_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct haptic_device_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::AutoCircle_generater::haptic_device_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::AutoCircle_generater::haptic_device_<ContainerAllocator>& v)
  {
    s << indent << "hdr: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.hdr);
    s << indent << "del_pos[]" << std::endl;
    for (size_t i = 0; i < v.del_pos.size(); ++i)
    {
      s << indent << "  del_pos[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.del_pos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOCIRCLE_GENERATER_MESSAGE_HAPTIC_DEVICE_H
